struct Node{
    Node* links[26];
    bool flag=false;
};

class Trie{

private:
    Node *root;
public:

    Trie(){
        root = new Node();
    }

    void insert(string word){
        Node* node = root;
        for(ll i=0;i<word.length();i++){
            if(!node->links[word[i]-'a']){
                Node* temp = new Node();
                node->links[word[i]-'a'] = temp;
            }
            node = node->links[word[i]-'a'];
        }
        node->flag=true;
    }

    string search(string word){
        Node* node = root;
        string res = "";

        for(ll i=0;i<word.length();i++){
            if(!node->links[word[i]-'a']){
                return word;
            }
            node = node->links[word[i]-'a'];
            res+=word[i];
            if(node->flag)
            return res;
        }
        return word;
    }

    bool startsWith(string prefix){
        Node* node = root;
        for(ll i=0;i<prefix.length();i++){
            if(!node->links[prefix[i]-'a']){
                return false;
            }
            node = node->links[prefix[i]-'a'];
        }
        return true;
    }

};
