class SGTree{
    
public:
    vector<int> seg;
    SGTree(int n){
        seg.resize(4*n+5);
    }

    void build(int idx,int low,int high,vector<int>&arr){
        if(low==high){
            seg[idx]=arr[low];
            return;
        }
        int mid=low+(high-low)/2;
        build(idx*2+1,low,mid,arr);
        build(idx*2+2,mid+1,high,arr);
        seg[idx]=min(seg[idx*2+1],seg[idx*2+2]);
    }
//l,r->query low,high->segment tree
    int query(int idx,int l,int r,int low,int high){
        if(l>high ||low>r) return INT_MAX;
        if(low>=l && r>=high) return seg[idx];
        int mid=low+(high-low)/2;
        return min(query(idx*2+1,l,r,low,mid),query(idx*2+2,l,r,mid+1,high));
    }

    void update(int idx,int low,int high,int i,int val){
        if(low==high){
            seg[idx]=val;
            return;
        }
        int mid=low+(high-low)/2;
        if(i<=mid) update(2*idx+1,low,mid,i,val);
        else update(2*idx+2,mid+1,high,i,val);
        seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
    }
};
