class SGTree{
    
public:
    vector<int> seg;
    SGTree(int n){
        seg.resize(4*n+5);
    }

    void build(int idx,int low,int high,vector<int>&arr){
        if(low==high){
            seg[idx]=arr[low];
            return;
        }
        int mid=low+(high-low)/2;
        build(idx*2+1,low,mid,arr);
        build(idx*2+2,mid+1,high,arr);
        seg[idx]=min(seg[idx*2+1],seg[idx*2+2]);
    }
//l,r->query low,high->segment tree
    int query(int idx,int l,int r,int low,int high){
        if(l>high ||low>r) return INT_MAX;
        if(low>=l && r>=high) return seg[idx];
        int mid=low+(high-low)/2;
        return min(query(idx*2+1,l,r,low,mid),query(idx*2+2,l,r,mid+1,high));
    }

    void update(int idx,int low,int high,int i,int val){
        if(low==high){
            seg[idx]=val;
            return;
        }
        int mid=low+(high-low)/2;
        if(i<=mid) update(2*idx+1,low,mid,i,val);
        else update(2*idx+2,mid+1,high,i,val);
        seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
    }
};





















To run


/*void solve(){
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
        cin>>arr[i];
    //vector<int>seg(4*n,0);
    //build(0,0,n-1,arr,seg);
    //cout<<seg[2]<<endl;
    SGTree seg(n);
    seg.build(0,0,n-1,arr);
    int q;
    cin>>q;
    while(q--){
        int type;
        cin>>type;
        if(type==1){
            int l,r;
            cin>>l>>r;
            cout<<seg.query(0,l,r,0,n-1)<<endl;
        }else{
            int i,val;
            cin>>i>>val;
            seg.update(0,0,n-1,i,val);
            arr[i]=val;
        }
    }
}*/

void solve(){
    int n;
    cin>>n;
    vector<int>arr1(n);
    vector<int>arr2(n);
    for(int i=0;i<n;i++)
        cin>>arr1[i];
    for(int i=0;i<n;i++)
        cin>>arr2[i];

    SGTree sg1(n);
    SGTree sg2(n);
    //cout<<sg2.seg[3]<<endl;
    sg1.build(0,0,n-1,arr1);
    sg2.build(0,0,n-1,arr2);

    int q;
    cin>>q;
    while(q--){
        int type;
        cin>>type;
        if(type==1){
            int l1,r1,l2,r2;
            cin>>l1>>r1>>l2>>r2;
            cout<<min(sg1.query(0,l1,r1,0,n-1),sg2.query(0,l2,r2,0,n-1))<<endl;
        }else{
            int arrNo,i,val;
            cin>>arrNo>>i>>val;
            if(arrNo==1){
                sg1.update(0,0,n-1,i,val);
                arr1[i]=val;
            }else{
                sg2.update(0,0,n-1,i,val);
                arr2[i]=val;
            }
        }
    }

}
